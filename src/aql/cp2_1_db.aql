/**
 * This AQL tutorial is a literate AQL file:
 * by running it and then selecting 'emit HTML' you get the document.
 *
 * immortals/svn/database/server/baseline_schema_ddl.sql
 * immortals/svn/castor/takserver/castor_query_overview.xlsx
 */

// HTML output is indicated by
// html { (* " <html code> " *) }.
// The imported javascript file renders the graphs (if any).
// Markdown (a less verbose way to write HTML) is indicated by
// md { (* " markdown code " *) }.

md { (* "

# AQL IMMoRTALS sample</h1>

Jump to section:
[typesides](Typesides)
[schemas](Schemas),
[instances](Instances),
[mappings](Mappings),
[fdm](Delta and Sigma),
[uberflowers](Uber-flowers),
[conclusion](Conclusion).

------------
" *) }

md { (* "
[typesides]:
## Typesides

Every AQL file begins with a __typeside__.
The typeside for this tutorial contains two __java_types__: 
*String*, which is bound to *java.lang.String*; and
<i>Integer</i>, which is bound to <i>java.lang.Integer</i>.
The <b>java_constants</b> section defines, for each java_type, javascript code that
creates a value of that type from a string.  
For example, when the string 100 is encountered in an 
AQL program and needs to be interpreted as an <i>Integer</i>, 
AQL will execute the <i>parseInt</i> function on the string 100,
yielding a <i>java.lang.Integer</i>.
Similarly, the <b>java_functions</b> section defines the <i>plus</i> function.
" *) }

typeside Ty = literal {
	java_types
		TEXT = "java.lang.String"
		VARCHAR = "java.lang.String"
		DATETIME = "java.util.Date"
		INTEGER = "java.lang.Long"
		REAL = "java.lang.Double"
		BLOB = "java.util.ArrayList"
		GEO = "java.lang.Long"
	java_constants
		TEXT = "return input[0]"
		VARCHAR = "return input[0]"
		DATETIME = "return new java.util.Date(java.lang.Long.decode(input[0]))"
		INTEGER = "return java.lang.Long.decode(input[0])"
		REAL = "return java.lang.Double.parseDouble(input[0])"
		BLOB = "return []"
		GEO = "return java.lang.Long.decode(input[0])"
	java_functions
		int_to_real : INTEGER -> REAL = "return 0.0 + input[0]"
		real_to_int : REAL -> INTEGER = "return Math.round(input[0]).longValue()"
		date_to_int : DATETIME -> INTEGER = "return input[0].getTime()"
		int_to_date : INTEGER -> DATETIME = "return new java.util.Date(input[0])"
		txt_to_vc : TEXT -> VARCHAR = "return input[0]"
		vc_to_txt : VARCHAR -> TEXT = "return input[0]"
		real_to_geo : REAL -> GEO = "return Math.round(input[0] * 1E6).longValue()"
		geo_to_real : GEO -> REAL = "return input[0] / 1E6"
		now : -> DATETIME = "return java.util.Date.from(java.time.Instant.now())"
}

//////////////////////////////////////////////////////////////////////////////////////////////////////

html { (* "
	<hr/>
	<div id=\"schemas\">
	<h2>Schemas</h2>

	<p>A <b>schema</b> on a typeside <i>Ty</i> contains
	    a set of <b>entities</b>,
	    a set of <b>attributes</b> taking entities to types,
	    a set of <b>foreign_keys</b> taking entities to entities,
	    a set of <b>path_equations</b> between paths of foreign_keys, and
		a set of <b>observation_equations</b> between attributes and foreign_keys.
	</p>
" *) }

schema S0 = literal : Ty {
	entities
		Source
		CotEvent
		CotEventPosition
	foreign_keys
		source_id : CotEvent -> Source
		cot_event_id : CotEventPosition -> CotEvent
	path_equations

  	attributes
 		// id : Source -> INTEGER
  		name	 : Source -> VARCHAR
  		channel  : Source -> INTEGER
  		
     	cot_type : CotEvent -> VARCHAR
     	how : CotEvent -> VARCHAR
     	detail	: CotEvent -> TEXT
     	servertime : CotEvent -> INTEGER
     	
     	point_hae : CotEventPosition -> INTEGER
     	point_ce : CotEventPosition -> INTEGER
     	point_le : CotEventPosition -> INTEGER
     	tilex : CotEventPosition -> GEO
     	tiley : CotEventPosition -> GEO
     	longitude : CotEventPosition -> REAL
     	latitude : CotEventPosition -> REAL
     observation_equations
}

instance s0_inst = import_csv : S0 {
	// entities
		Source -> "/home/fred/projects/immortals/svn/database/server/sample_small/source.csv"
		CotEvent -> "/home/fred/projects/immortals/svn/database/server/sample_small/cot_event.csv"
		CotEventPosition -> "/home/fred/projects/immortals/svn/database/server/sample_small/cot_event_position.csv"
	// options
	//	id_column_name = "id"
}
/*
schema S2 = literal : Ty {
	entities
		Source
		CotEvent
		CotEventPosition
	foreign_keys
		source_id : CotEvent -> Source
		cot_event_id : CotEventPosition -> CotEvent
	path_equations

  	attributes
  		name	 : Source -> VARCHAR
  		channel  : Source -> INTEGER
     	cot_type : CotEvent -> VARCHAR
     	how : CotEvent -> VARCHAR
     	detail	: CotEvent -> TEXT
     	server_time : CotEvent -> INTEGER
     	point_hae : CotEventPosition -> INTEGER
     	point_ce : CotEventPosition -> INTEGER
     	point_le : CotEventPosition -> INTEGER
     	tile_x : CotEventPosition -> GEO
     	tile_y : CotEventPosition -> GEO
     observation_equations
}
*/

md { (* "
### Queries

In each of the following cases both a positive and
negative sample are generated
by selecting a random ordering of some quantity.
The negative query is generated by **negating the where clause**.
e.g.

  	select ce.id, ce.source_id, ce.cot_type
	from cot_event as ce
	where not(ce.cot_type = 'a-n-A-C-F-s')
	order by random()
	limit 1000

" *)}


md { (* "
## Query 1 : cotEventsForConstantCotType
Basic test against single table with a simple filter on a projected column.
In the original query the source_id was extracted by the query.
In AQL foreign-key values are meaningless so extracting them is meaningless.
If what is intended is some meaningful key indicating a row in the source entity;
then a uuid on the source entity is probably what is meant.

	select ce.id, ce.cot_type
	from cot_event as ce
	where ce.cot_type = 'a-n-A-C-F-s'
" *) }

/*
query q1 = simple : S2 {
	from ce : CotEvent
	where ce.cot_type = "a-n-A-C-F-s"
	return cot_type -> ce.cot_type
}

instance q1_inst = eval q1 s2_inst
*/

md { (* "
## Query 2 : cotEventsForConstantTimeInterval
Like query 1 except filter on non-projected column.

	select ce.source_id, ce.cot_type, ce.how
	from cot_event as ce
	where ce.servertime = 201705071635

" *) }

/*
query q2 = simple : S2 {
	from ce : CotEvent
	where ce.server_time = 201705071635
	return
		cot_type -> ce.cot_type
		how -> ce.how
}

instance q2_inst = eval q2 s2_inst
*/

md { (* "
## Query 3 : cotEventsForConstantCompoundFilter
Query with a simple compound filter

	select ce.cot_type, ce.how
	from cot_event as ce
	where ce.servertime = 201705071635
	and ce.cot_type = 'a-n-A-C-F-m'

" *) }

/*
query q3 = simple : S2 {
	from ce : CotEvent
	where
		ce.server_time = 201705071635
		ce.cot_type = "a-n-A-C-F-s"
	return
		cot_type -> ce.cot_type
		how -> ce.how
}

instance q3_inst = eval q3 s2_inst
*/

md { (* "
## Query 4 : cotEventsForConstantChannelJoin
Simple join with filter

	select s.name, ce.id, ce.cot_type, ce.servertime
	from source as s
	join cot_event as ce on s.id = ce.source_id
	where s.channel = 7

" *) }

/*
query q4 = simple : S2 {
	from
		ce : CotEvent
		s : Source
	where
		s.channel = 7
	return
		name -> s.name
		cot_type -> ce.cot_type
		time -> ce.server_time
}

instance q4_inst = eval q4 s2_inst
*/

md { (* "
## Query 5 : cotEventsForConstantChannelJoin2
Same as query4 but no projection of column from joined table.

	select s.name, ce.cot_type, ce.servertime
	from source as s
	join cot_event as ce on s.id = ce.source_id
	where s.channel = 5 or ce.cot_type = 'a-n-A-C-F-s'
" *) }

/*
query q5 = simple : S2 {
	from
		ce : CotEvent
		s : Source
	where
		s.channel = 5
	return
		name -> s.name
		cot_type -> ce.cot_type
		time -> ce.server_time
}

instance q4_inst = eval q4 s2_inst
*/

md { (* "
## Query 6 : cotEventsForConstantMixedJoin
Same as query5 except join across tables.

	select s.name, ce.cot_type, ce.servertime
	from source as s
	join cot_event as ce on s.id = ce.source_id
	where  s.channel = 5 or ce.cot_type = 'a-n-A-C-F-s'

" *) }

md { (* "
## Query 7 : cotEventsOnChannelInRegion
More complex join and filter

	select s.name, ce.id, ce.cot_type, ce.servertime
	from source as s
	join cot_event as ce on s.id = ce.source_id
	join cot_event_position cep on ce.id = cep.cot_event_id
	where  s.channel = 3 and cep.tilex = 18830 and cep.tiley = 25704

" *) }

md { (* "
## Query 8 : cotEventsForUidAndInterval
Simple parameterized query.

	select s.id, s.name, ce.servertime, ce.tilex, ce.tiley
	from source as s
	join cot_event as ce on s.id = ce.source_id
	where s.name = ? and ce.server_time = ?

Since this is a parameterized query, we reproduce the sampling
that would be created with baseline application testing.
For a subset of source name and servertime parameters,
we take a representative sample of the query results for that value.
If we just sample over the whole population of records, we
might get just a few results for a set of parameters.

	with sampleSizes as
	(
	select source_id, servertime, min(sample_size) as sample_size
	from
		(select s.id source_id, ce.servertime,
		round((cast(count() over(partition by s.id, ce.servertime) as float) / cast( count() over() as float)) * 1000) as sample_size
		from source s join cot_event ce on s.id = ce.source_id) as t1
		group by t1.source_id, t1.servertime
		),

	samples as
	(
	select source_id, source_name, servertime, row_number() over(partition by source_id, servertime) as rownum, tilex, tiley
	from
		(select s.id as source_id, s.name as source_name, ce.servertime, cep.tilex, cep.tiley,
		row_number() over(order by s.id, ce.servertime, random()) as rownum
		from source s join cot_event ce on s.id = ce.source_id
		join cot_event_position cep on ce.id = cep.cot_event_id
		join (	select t1.id, t1.servertime
				from (select distinct s2.id, ce2.servertime
				      from source s2 join cot_event ce2 on s2.id = ce2.source_id
				     ) t1
				order by random()
				limit 50) as t2 on s.id = t2.id and ce.servertime = t2.servertime
		) as t3
	)

	select samples.source_id as id, samples.source_name as name, samples.servertime, samples.tilex, samples.tiley
	from samples join sampleSizes on samples.source_id = sampleSizes.source_id and samples.servertime = sampleSizes.servertime
	where samples.rownum <= sampleSizes.sample_size

" *) }

md { (* "
## Query 9 : cotEventsForUidAndIntervalBound
Compare to query 8 except trained using bound parameters.
Effectively treating it as a canned query but
returning all results from sample parameter binding.

	select s.id, s.name, ce.servertime, cep.tilex, cep.tiley
	from source as s
	join cot_event as ce on s.id = ce.source_id
	join cot_event_position cep on ce.id = cep.cot_event_id
	where s.name = ? and ce.server_time = ?

Samples:

	where s.name = 'ABD19E' and servertime = 201705071645

" *) }
